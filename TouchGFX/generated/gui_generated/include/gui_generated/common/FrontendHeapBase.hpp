/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef FRONTENDHEAPBASE_HPP
#define FRONTENDHEAPBASE_HPP

#include <common/Meta.hpp>
#include <common/Partition.hpp>
#include <mvp/MVPHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <touchgfx/transitions/CoverTransition.hpp>
#include <touchgfx/transitions/SlideTransition.hpp>






















#include <gui/common/FrontendApplication.hpp>
#include <gui/model/Model.hpp>

#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>
#include <gui/main_screen/mainView.hpp>
#include <gui/main_screen/mainPresenter.hpp>
#include <gui/calendar_screen/calendarView.hpp>
#include <gui/calendar_screen/calendarPresenter.hpp>
#include <gui/count_up_screen/count_upView.hpp>
#include <gui/count_up_screen/count_upPresenter.hpp>
#include <gui/count_up2_screen/count_up2View.hpp>
#include <gui/count_up2_screen/count_up2Presenter.hpp>
#include <gui/count_down_screen/count_downView.hpp>
#include <gui/count_down_screen/count_downPresenter.hpp>
#include <gui/alarm_screen/alarmView.hpp>
#include <gui/alarm_screen/alarmPresenter.hpp>
#include <gui/alarmmmmm_screen/alarmmmmmView.hpp>
#include <gui/alarmmmmm_screen/alarmmmmmPresenter.hpp>


/**
 * This class provides the memory that shall be used for memory allocations
 * in the frontend. A single instance of the FrontendHeap is allocated once (in heap
 * memory), and all other frontend objects such as views, presenters and data model are
 * allocated within the scope of this FrontendHeap. As such, the RAM usage of the entire
 * user interface is sizeof(FrontendHeap).
 *
 * @note The FrontendHeap reserves memory for the most memory-consuming presenter and
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public MVPHeap
{
public:
    /**
     * A list of all view types. Must end with meta::Nil.
     * @note All view types used in the application MUST be added to this list!
     */
    typedef meta::TypeList< Screen1View,
            meta::TypeList< Screen2View,
            meta::TypeList< mainView,
            meta::TypeList< calendarView,
            meta::TypeList< count_upView,
            meta::TypeList< count_up2View,
            meta::TypeList< count_downView,
            meta::TypeList< alarmView,
            meta::TypeList< alarmmmmmView,
            meta::Nil > > > > > > > >
            > GeneratedViewTypes;

    /**
     * Determine (compile time) the View type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedViewTypes >::type MaxGeneratedViewType;

    /**
     * A list of all presenter types. Must end with meta::Nil.
     * @note All presenter types used in the application MUST be added to this list!
     */
    typedef meta::TypeList< Screen1Presenter,
            meta::TypeList< Screen2Presenter,
            meta::TypeList< mainPresenter,
            meta::TypeList< calendarPresenter,
            meta::TypeList< count_upPresenter,
            meta::TypeList< count_up2Presenter,
            meta::TypeList< count_downPresenter,
            meta::TypeList< alarmPresenter,
            meta::TypeList< alarmmmmmPresenter,
            meta::Nil > > > > > > > >
            > GeneratedPresenterTypes;

    /**
     * Determine (compile time) the Presenter type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedPresenterTypes >::type MaxGeneratedPresenterType;

    /**
     * A list of all transition types. Must end with meta::Nil.
     * @note All transition types used in the application MUST be added to this list!
     */
    typedef meta::TypeList< NoTransition,
            meta::TypeList< CoverTransition<WEST>,
            meta::TypeList< SlideTransition<EAST>,
            meta::Nil > >
            > GeneratedTransitionTypes;

    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotomainScreenNoTransition();
    }
protected:
    FrontendHeapBase(AbstractPartition& presenters, AbstractPartition& views, AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
    {

    }

};

#endif // FRONTENDHEAPBASE_HPP
