/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/alarm_screen/alarmViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

alarmViewBase::alarmViewBase() :
    buttonCallback(this, &alarmViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &alarmViewBase::flexButtonCallbackHandler)
{
    box1.setPosition(0, 0, 480, 272);
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(29, 29, 29));

    ALARM.setPosition(369, 94, 32, 76);
    ALARM.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    ALARM.setLinespacing(0);
    ALARM.setRotation(TEXT_ROTATE_90);
    ALARM.setTypedText(TypedText(T_SINGLEUSEID126));

    minutes_val.setPosition(218, 27, 93, 98);
    minutes_val.setColor(touchgfx::Color::getColorFrom24BitRGB(218, 19, 19));
    minutes_val.setLinespacing(0);
    minutes_val.setRotation(TEXT_ROTATE_90);
    Unicode::snprintf(minutes_valBuffer, MINUTES_VAL_SIZE, "%s", TypedText(T_SINGLEUSEID128).getText());
    minutes_val.setWildcard(minutes_valBuffer);
    minutes_val.setTypedText(TypedText(T_SINGLEUSEID127));

    colon.setPosition(177, 125, 97, 23);
    colon.setColor(touchgfx::Color::getColorFrom24BitRGB(218, 19, 19));
    colon.setLinespacing(0);
    colon.setRotation(TEXT_ROTATE_270);
    colon.setTypedText(TypedText(T_SINGLEUSEID129));

    hour_val.setPosition(218, 148, 93, 98);
    hour_val.setColor(touchgfx::Color::getColorFrom24BitRGB(218, 19, 19));
    hour_val.setLinespacing(0);
    hour_val.setRotation(TEXT_ROTATE_90);
    Unicode::snprintf(hour_valBuffer, HOUR_VAL_SIZE, "%s", TypedText(T_SINGLEUSEID131).getText());
    hour_val.setWildcard(hour_valBuffer);
    hour_val.setTypedText(TypedText(T_SINGLEUSEID130));

    flexButton1.setBoxWithBorderPosition(0, 0, 26, 24);
    flexButton1.setBorderSize(5);
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(76, 74, 209), touchgfx::Color::getColorFrom24BitRGB(61, 72, 186), touchgfx::Color::getColorFrom24BitRGB(179, 174, 252), touchgfx::Color::getColorFrom24BitRGB(191, 187, 255));
    flexButton1.setPosition(454, 125, 26, 24);
    flexButton1.setAction(flexButtonCallback);

    flexButton1_1.setBoxWithBorderPosition(0, 0, 26, 24);
    flexButton1_1.setBorderSize(5);
    flexButton1_1.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(230, 58, 27), touchgfx::Color::getColorFrom24BitRGB(230, 54, 22), touchgfx::Color::getColorFrom24BitRGB(255, 139, 134), touchgfx::Color::getColorFrom24BitRGB(255, 151, 132));
    flexButton1_1.setPosition(454, 246, 26, 24);
    flexButton1_1.setAction(flexButtonCallback);

    flexButton1_2.setBoxWithBorderPosition(0, 0, 26, 24);
    flexButton1_2.setBorderSize(5);
    flexButton1_2.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(237, 230, 39), touchgfx::Color::getColorFrom24BitRGB(245, 229, 57), touchgfx::Color::getColorFrom24BitRGB(255, 251, 204), touchgfx::Color::getColorFrom24BitRGB(255, 244, 176));
    flexButton1_2.setPosition(454, 0, 26, 24);
    flexButton1_2.setAction(flexButtonCallback);

    up_h.setXY(176, 182);
    up_h.setBitmaps(Bitmap(BITMAP_UP_R_ID), Bitmap(BITMAP_UP_R2_ID));
    up_h.setAction(buttonCallback);

    down_h.setXY(294, 182);
    down_h.setBitmaps(Bitmap(BITMAP_DOWN_R_ID), Bitmap(BITMAP_DOWN_R2_ID));
    down_h.setAction(buttonCallback);

    up_min.setXY(176, 61);
    up_min.setBitmaps(Bitmap(BITMAP_UP_R_ID), Bitmap(BITMAP_UP_R2_ID));
    up_min.setAction(buttonCallback);

    down_min.setXY(294, 61);
    down_min.setBitmaps(Bitmap(BITMAP_DOWN_R_ID), Bitmap(BITMAP_DOWN_R2_ID));
    down_min.setAction(buttonCallback);

    save.setXY(88, 82);
    save.setBitmaps(Bitmap(BITMAP_SAVE_ID), Bitmap(BITMAP_SAVE2_ID));
    save.setAction(buttonCallback);

    add(box1);
    add(ALARM);
    add(minutes_val);
    add(colon);
    add(hour_val);
    add(flexButton1);
    add(flexButton1_1);
    add(flexButton1_2);
    add(up_h);
    add(down_h);
    add(up_min);
    add(down_min);
    add(save);
}

void alarmViewBase::setupScreen()
{

}

void alarmViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &up_h)
    {
        //Interaction7
        //When up_h clicked call virtual function
        //Call upHour
        upHour();
    }
    else if (&src == &down_h)
    {
        //Interaction6
        //When down_h clicked call virtual function
        //Call downHour
        downHour();
    }
    else if (&src == &up_min)
    {
        //Interaction5
        //When up_min clicked call virtual function
        //Call upMin
        upMin();
    }
    else if (&src == &down_min)
    {
        //Interaction4
        //When down_min clicked call virtual function
        //Call downMin
        downMin();
    }
    else if (&src == &save)
    {
        //Interaction8
        //When save clicked call virtual function
        //Call saveAlram
        saveAlram();
    }
}

void alarmViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
    {
        //Interaction1
        //When flexButton1 clicked change screen to main
        //Go to main with no screen transition
        application().gotomainScreenNoTransition();
    }
    else if (&src == &flexButton1_1)
    {
        //Interaction2
        //When flexButton1_1 clicked change screen to count_up
        //Go to count_up with no screen transition
        application().gotocount_upScreenNoTransition();
    }
    else if (&src == &flexButton1_2)
    {
        //Interaction3
        //When flexButton1_2 clicked change screen to calendar
        //Go to calendar with no screen transition
        application().gotocalendarScreenNoTransition();
    }
}
